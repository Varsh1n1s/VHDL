/*Logic gates are basic digital building blocks that 
perform logical operations like AND, OR, NOT, and XOR, 
used to create circuits for processing binary data.*/

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity logic_gates is
    Port ( A : in  STD_LOGIC;
           B : in  STD_LOGIC;
           and_gate, or_gate, not_gate : out  STD_LOGIC;
           nor_gate, nand_gate, xor_gate, xnor_gate : out  STD_LOGIC);
end logic_gates;

architecture gates of logic_gates is

begin

and_gate <= A and B; //AND operation on A and B
or_gate <= A or B; //OR operation on A and B
not_gate <= not A; //NOT operation on A 
nor_gate <= A nor B; //NOR operation on A and B
nand_gate <= A nand B; //NAND operation on A and B
xor_gate <= A xor B; //XOR operation on A and B
xnor_gate <= A xnor B; //XNOR operation on A and B

end gates;

//Test Bench code is as follows:

ENTITY logic_gates_tb IS
END logic_gates_tb;
 
ARCHITECTURE behavior OF logic_gates_tb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT logic_gates
    PORT(
         A : IN  std_logic;
         B : IN  std_logic;
         and_gate : OUT  std_logic;
         or_gate : OUT  std_logic;
         not_gate : OUT  std_logic;
         nor_gate : OUT  std_logic;
         nand_gate : OUT  std_logic;
         xor_gate : OUT  std_logic;
         xnor_gate : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal A : std_logic := '0';
   signal B : std_logic := '0';

 	--Outputs
   signal and_gate : std_logic;
   signal or_gate : std_logic;
   signal not_gate : std_logic;
   signal nor_gate : std_logic;
   signal nand_gate : std_logic;
   signal xor_gate : std_logic;
   signal xnor_gate : std_logic;
   -- No clocks detected in port list. Replace <clock> below with 
   -- appropriate port name 

 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: logic_gates PORT MAP (
          A => A,
          B => B,
          and_gate => and_gate,
          or_gate => or_gate,
          not_gate => not_gate,
          nor_gate => nor_gate,
          nand_gate => nand_gate,
          xor_gate => xor_gate,
          xnor_gate => xnor_gate
        );

   -- Stimulus process
   stim_proc: process
   begin

      -- insert stimulus here 
		A <= '0';
		B <= '0';
		wait for 10 ns;
		A <= '0';
		B <= '1';
		wait for 10 ns;
		A <= '1';
		B <= '0';
		wait for 10 ns;
		A <= '1';
		B <= '1';
		wait for 10 ns;

   end process;

END;
